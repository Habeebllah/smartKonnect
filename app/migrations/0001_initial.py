# Generated by Django 3.1 on 2022-10-28 16:02

import app.models
from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254)),
                ('FullName', models.CharField(max_length=200, null=True)),
                ('Address', models.CharField(max_length=500, null=True)),
                ('BankName', models.CharField(blank=True, choices=[('Access Bank', 'Access Bank'), ('Access(Diamond) Bank', 'Access (Diamond) Bank'), ('ECO Bank', 'ECO Bank'), ('First Bank of Nigeria', 'First Bank of Nigeria'), ('FCMBank', 'FCMBank'), ('FIdelity Bank', 'FIdelity Bank'), ('GTBank', 'GTBank'), ('Heritage Bank', 'Heritage Bank'), ('Kuda Bank', 'Kuda Bank'), ('Opay', 'Opay'), ('Palmpay', 'Palmpay'), ('Polarise Bank', 'Polarise Bank'), ('Stanbic IBTC', 'Stanbic IBTC'), ('Sterling Bank', 'Sterling Bank'), ('UBA', 'UBA'), ('Union Bank', 'Union Bank'), ('Unity Bank', 'Unity Bank'), ('Wema Bank', 'Wema Bank'), ('Zenith Bank', 'Zenith Bank')], max_length=100)),
                ('AccountNumber', models.CharField(blank=True, max_length=40)),
                ('Phone', models.CharField(blank=True, max_length=30)),
                ('AccountName', models.CharField(blank=True, max_length=200)),
                ('Account_Balance', models.FloatField(default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('pin', models.CharField(blank=True, max_length=5, null=True)),
                ('referer_username', models.CharField(blank=True, max_length=50, null=True)),
                ('first_payment', models.BooleanField(default=False)),
                ('Referer_Bonus', models.FloatField(default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('user_type', models.CharField(choices=[('Smart Earner', 'Smart Earner'), ('Affilliate', 'Affilliate'), ('TopUser', 'TopUser'), ('API', 'API')], default='Smart Earner', max_length=30, null=True)),
                ('reservedaccountNumber', models.CharField(blank=True, max_length=100, null=True)),
                ('reservedbankName', models.CharField(blank=True, max_length=100, null=True)),
                ('reservedaccountReference', models.CharField(blank=True, max_length=100, null=True)),
                ('Bonus', models.FloatField(default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('verify', models.BooleanField(default=False)),
                ('email_verify', models.BooleanField(default=False)),
                ('DOB', models.DateField(blank=True, null=True)),
                ('Gender', models.CharField(max_length=6, null=True)),
                ('State_of_origin', models.CharField(max_length=100, null=True)),
                ('Local_gov_of_origin', models.CharField(max_length=100, null=True)),
                ('BVN', models.CharField(max_length=50, null=True)),
                ('passport_photogragh', models.ImageField(help_text='Maximum of 50kb in size', null=True, upload_to='passport_images')),
                ('accounts', models.TextField(blank=True, null=True)),
                ('accounts2', models.TextField(blank=True, null=True)),
                ('webhook', models.URLField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'USERS MANAGEMENT',
            },
            managers=[
                ('objects', app.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Admin_number',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('network', models.CharField(choices=[('MTN', 'MTN'), ('GLO', 'GLO'), ('AIRTEL', 'AIRTEL'), ('9MOBILE', '9MOBILE'), ('SMILE', 'SMILE'), ('SPECTRANET', 'SPECTRANET'), ('SWIFT', 'SWIFT')], max_length=30, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=30, unique=True)),
            ],
            options={
                'verbose_name_plural': 'AIRTIME TO CASH NUMBER',
            },
        ),
        migrations.CreateModel(
            name='AppAdsImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('banner', models.ImageField(help_text='Dimensions:400 by 250 in pixel. width by height', null=True, upload_to='adsbanner')),
                ('route', models.CharField(help_text='i.e /datanet for buy data page other route /datanet =  buy data page \n /airtimenet = buy airtime page \n /cablename = cable sub page \n /bill = billpayment page \n /referal = referal page', max_length=500, null=True)),
            ],
            options={
                'verbose_name_plural': 'APP ADS BANNERS',
            },
        ),
        migrations.CreateModel(
            name='BankAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bank_name', models.CharField(blank=True, max_length=500, null=True)),
                ('account_name', models.CharField(blank=True, max_length=500, null=True)),
                ('account_number', models.CharField(blank=True, max_length=15, null=True)),
            ],
            options={
                'verbose_name_plural': 'ADMIN BANK ACCOUNT',
            },
        ),
        migrations.CreateModel(
            name='Black_List_Phone_Number',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(blank=True, max_length=30)),
            ],
            options={
                'verbose_name_plural': 'BLACKLIST PHONE NUMBER',
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('author', models.CharField(db_index=True, max_length=100)),
                ('slug', models.SlugField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('available', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('image', models.ImageField(blank=True, upload_to='books/%Y/%m/%d')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Btc_rate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate', models.CharField(choices=[('Selling_rate', 'Selling_rate'), ('Buying_rate', 'Buying_rate')], max_length=50)),
                ('btc_wallet_address', models.CharField(default='abcdef', max_length=200)),
                ('amount', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Cable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('GOTV', 'GOTV'), ('DSTV', 'DSTV'), ('STARTIME', 'STARTIME'), ('TSTV', 'TSTV')], max_length=30, unique=True)),
                ('status', models.CharField(choices=[('Fair', 'Fair'), ('Bad', 'Bad'), ('Strong', 'Strong')], max_length=30)),
                ('vending_api', models.CharField(blank=True, choices=[('VTPASS', 'VTPASS'), ('RINGO', 'RINGO')], default='VTPASS', max_length=50, null=True)),
            ],
            options={
                'verbose_name_plural': 'CABLE COMPANY',
            },
        ),
        migrations.CreateModel(
            name='CablePlan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan_amount', models.PositiveIntegerField()),
                ('merchant_id', models.PositiveIntegerField(blank=True, max_length=200, null=True)),
                ('product_code', models.CharField(blank=True, max_length=200, null=True)),
                ('package', models.CharField(help_text='package(ie GOTV Plus)', max_length=200)),
                ('hasAddon', models.BooleanField(default=False)),
                ('Addon_name', models.CharField(blank=True, help_text='package(ie Asian Add-on)', max_length=200, null=True)),
                ('addoncode', models.CharField(blank=True, max_length=200, null=True)),
                ('commission', models.PositiveIntegerField(default=0)),
                ('cablename', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.cable')),
            ],
            options={
                'verbose_name_plural': 'CABLE SUBSCRIPTION PLAN',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=150)),
                ('slug', models.SlugField(blank=True, max_length=150, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'category',
                'verbose_name_plural': 'categories',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Charge_referral_bonus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100, null=True)),
                ('amount', models.IntegerField()),
                ('balance_before', models.FloatField(blank=True, help_text='leave blank sytem automatic set this', null=True)),
                ('balance_after', models.FloatField(blank=True, help_text='leave blank sytem automatic set this', null=True)),
                ('comment', models.TextField()),
                ('pending_amount', models.IntegerField(default=0, help_text='leave blank sytem automatic set this,if the amount you want to with not upto user wallet, pending amount wait till when user fund next')),
            ],
            options={
                'verbose_name_plural': 'WITHDRAW FROM USER BONUS WALLET',
            },
        ),
        migrations.CreateModel(
            name='Charge_user',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100, null=True)),
                ('amount', models.IntegerField()),
                ('balance_before', models.FloatField(blank=True, help_text='leave blank sytem automatic set this', null=True)),
                ('balance_after', models.FloatField(blank=True, help_text='leave blank sytem automatic set this', null=True)),
                ('comment', models.TextField()),
                ('pending_amount', models.IntegerField(default=0, help_text='leave blank sytem automatic set this,if the amount you want to with not upto user wallet, pending amount wait till when user fund next')),
            ],
            options={
                'verbose_name_plural': 'WITHDRAW FROM USER WALLET',
            },
        ),
        migrations.CreateModel(
            name='Couponcode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Coupon_Code', models.CharField(max_length=15, unique=True)),
                ('amount', models.CharField(max_length=15)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('ident', models.CharField(default=app.models.create_id, editable=False, max_length=30)),
                ('Used', models.BooleanField()),
            ],
            options={
                'verbose_name_plural': 'COUPON CODES',
            },
        ),
        migrations.CreateModel(
            name='Disable_Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.CharField(choices=[('Data', 'Data'), ('Airtime', 'Airtime'), ('Cablesub', 'Cablesub'), ('Bill', 'Bill'), ('Bankpayment', 'Bankpayment'), ('Monnify ATM', 'Monnify ATM'), ('Monnfy bank', 'Monnify bank'), ('paystack', 'paystack'), ('Result_checker', 'Result_checker'), ('Recharge_Printing', 'Recharge_Printing'), ('Bulk sms', 'Bulk sms'), ('Airtime_Funding', 'Airtime_Funding')], max_length=50, unique=True)),
                ('disable', models.BooleanField(default=False, help_text='Check this box to disable this service, uncheck to unable it back')),
            ],
            options={
                'verbose_name_plural': 'DISABLE SERVICES',
            },
        ),
        migrations.CreateModel(
            name='Disco_provider_name',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
                ('p_id', models.CharField(max_length=150, null=True, unique=True)),
                ('commission', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name_plural': 'DISCO PROVIDER NAMES',
            },
        ),
        migrations.CreateModel(
            name='exam_pin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam', models.CharField(choices=[('WAEC', 'WAEC'), ('NECO', 'NECO'), ('NABTEB', 'NABTEB')], default='WAEC', max_length=30)),
                ('available', models.BooleanField(default=True)),
                ('pin', models.CharField(max_length=100, null=True, unique=True)),
                ('serial', models.CharField(max_length=100, null=True, unique=True)),
            ],
            options={
                'verbose_name_plural': 'EXAM PINS GENERATED',
            },
        ),
        migrations.CreateModel(
            name='frequentlyAskedQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(blank=True, max_length=100, null=True)),
                ('answer', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'FREQUENTLY ASKED QUESTIONS',
            },
        ),
        migrations.CreateModel(
            name='Fund_User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100, null=True)),
                ('amount', models.IntegerField()),
                ('balance_before', models.FloatField(blank=True, help_text='leave blank sytem automatic set this', null=True)),
                ('balance_after', models.FloatField(blank=True, help_text='leave blank sytem automatic set this', null=True)),
            ],
            options={
                'verbose_name_plural': 'FUND USER WALLET',
            },
        ),
        migrations.CreateModel(
            name='Fund_User_Bonus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100, null=True)),
                ('amount', models.IntegerField()),
                ('balance_before', models.FloatField(blank=True, help_text='leave blank sytem automatic set this', null=True)),
                ('balance_after', models.FloatField(blank=True, help_text='leave blank sytem automatic set this', null=True)),
            ],
            options={
                'verbose_name_plural': 'FUND USER REFERRAL BONUS WALLET',
            },
        ),
        migrations.CreateModel(
            name='Info_Alert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='alert_images')),
            ],
            options={
                'verbose_name_plural': 'CREATE ALERT NOTIFICATION',
            },
        ),
        migrations.CreateModel(
            name='Load_exam_pin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam', models.CharField(choices=[('WAEC', 'WAEC'), ('NECO', 'NECO'), ('NABTEB', 'NABTEB')], default='WAEC', max_length=30)),
                ('dump_pin', models.TextField()),
                ('total_pin_loaded', models.CharField(blank=True, help_text='Leave blank, system automatic return it', max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'GENERATE EXAM PIN',
            },
        ),
        migrations.CreateModel(
            name='Network',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('MTN', 'MTN'), ('GLO', 'GLO'), ('AIRTEL', 'AIRTEL'), ('9MOBILE', '9MOBILE'), ('SMILE', 'SMILE'), ('SPECTRANET', 'SPECTRANET'), ('SWIFT', 'SWIFT')], max_length=30, unique=True)),
                ('data_vending_medium', models.CharField(choices=[('EMAIL', 'EMAIL'), ('MSPLUG', 'MSPLUG'), ('OGDAMS', 'OGDAMS'), ('MSORG_DEVELOPED_WEBSITE', 'MSORG Developed Website 1'), ('MSORG_DEVELOPED_WEBSITE_2', 'MSORG Developed Website 2'), ('MSORG_DEVELOPED_WEBSITE_3', 'MSORG Developed Website 3'), ('RINGO', 'RINGO'), ('SIMHOST', 'USSD.SIMHOSTING'), ('SIMHOST_NG', 'SIMHOSTNG.COM'), ('SMEPLUG', 'SMEPLUG'), ('SMEIFY', 'SMEIFY'), ('SMS', 'SMS'), ('SMS FORWARDER', 'SMS FORWARDER'), ('VTPASS', 'VTPASS'), ('VTUAUTO', 'VTUAUTO')], max_length=30)),
                ('gifting_vending_medium', models.CharField(blank=True, choices=[('EMAIL', 'EMAIL'), ('MSPLUG', 'MSPLUG'), ('OGDAMS', 'OGDAMS'), ('MSORG_DEVELOPED_WEBSITE', 'MSORG Developed Website 1'), ('MSORG_DEVELOPED_WEBSITE_2', 'MSORG Developed Website 2'), ('MSORG_DEVELOPED_WEBSITE_3', 'MSORG Developed Website 3'), ('RINGO', 'RINGO'), ('SIMHOST', 'USSD.SIMHOSTING'), ('SIMHOST_NG', 'SIMHOSTNG.COM'), ('SMEPLUG', 'SMEPLUG'), ('SMEIFY', 'SMEIFY'), ('SMS', 'SMS'), ('SMS FORWARDER', 'SMS FORWARDER'), ('VTPASS', 'VTPASS'), ('VTUAUTO', 'VTUAUTO')], max_length=30, null=True)),
                ('corporate_data_vending_medium', models.CharField(blank=True, choices=[('SIMHOST_NG', 'SIMHOSTNG.COM'), ('SMS', 'SMS'), ('SMEIFY', 'SMEIFY'), ('MSORG_DEVELOPED_WEBSITE_2', 'MSORG Developed Website 2'), ('UWS', 'UWS'), ('SIMHOST', 'USSD.SIMHOSTING'), ('MSORG_DEVELOPED_WEBSITE_3', 'MSORG Developed Website 3'), ('EMAIL', 'EMAIL'), ('SMEPLUG', 'SMEPLUG'), ('MSORG_DEVELOPED_WEBSITE', 'MSORG Developed Website 1'), ('QTopUp', 'QTopUp')], max_length=30, null=True)),
                ('vtu_vending_medium', models.CharField(choices=[('EMAIL', 'EMAIL'), ('MSPLUG', 'MSPLUG'), ('OGDAMS', 'OGDAMS'), ('MSORG_DEVELOPED_WEBSITE', 'MSORG Developed Website 1'), ('MSORG_DEVELOPED_WEBSITE_2', 'MSORG Developed Website 2'), ('MSORG_DEVELOPED_WEBSITE_3', 'MSORG Developed Website 3'), ('RINGO', 'RINGO'), ('SIMHOST', 'USSD.SIMHOSTING'), ('SIMHOST_NG', 'SIMHOSTNG.COM'), ('SMEPLUG', 'SMEPLUG'), ('SMEIFY', 'SMEIFY'), ('SMS', 'SMS'), ('SMS FORWARDER', 'SMS FORWARDER'), ('VTPASS', 'VTPASS'), ('VTUAUTO', 'VTUAUTO')], max_length=30, null=True)),
                ('msorg_web_net_id', models.CharField(blank=True, max_length=5, null=True)),
                ('msorg_web2_net_id', models.CharField(blank=True, max_length=5, null=True)),
                ('msorg_web3_net_id', models.CharField(blank=True, max_length=5, null=True)),
                ('share_and_sell_vending_medium', models.CharField(choices=[('EMAIL', 'EMAIL'), ('MSORG_DEVELOPED_WEBSITE', 'MSORG Developed Website 1'), ('MSORG_DEVELOPED_WEBSITE_2', 'MSORG Developed Website 2'), ('MSORG_DEVELOPED_WEBSITE_3', 'MSORG Developed Website 3'), ('MSPLUG', 'MSPLUG'), ('SIMHOST', 'USSD.SIMHOSTING'), ('SIMHOST_NG', 'SIMHOSTNG.COM'), ('SMEIFY', 'SMEIFY'), ('SMS', 'SMS'), ('VTUAUTO', 'VTUAUTO')], max_length=30, null=True)),
                ('sme_disable', models.BooleanField(blank=True, default=False, null=True)),
                ('gifting_disable', models.BooleanField(blank=True, default=False, null=True)),
                ('corporate_gifting_disable', models.BooleanField(blank=True, default=False, null=True)),
                ('airtime_disable', models.BooleanField(blank=True, default=False, null=True)),
                ('data_disable', models.BooleanField(blank=True, default=False, null=True)),
                ('recharge_pin_disable', models.BooleanField(blank=True, default=False, null=True)),
                ('share_and_sell_disable', models.BooleanField(blank=True, default=False, null=True)),
                ('awuf4u_disable', models.BooleanField(blank=True, default=False, null=True)),
                ('network_logo', models.ImageField(blank=True, null=True, upload_to='network_logo')),
            ],
            options={
                'verbose_name_plural': 'NETWORKS',
            },
        ),
        migrations.CreateModel(
            name='Network_1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('MTN', 'MTN'), ('AIRTEL', 'AIRTEL')], max_length=30, unique=True)),
                ('status', models.CharField(choices=[('Fair', 'Fair'), ('Bad', 'Bad'), ('Strong', 'Strong')], max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Recharge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('available', models.BooleanField(default=True)),
                ('amount', models.FloatField(default=0)),
                ('amount_to_pay', models.FloatField(default=0)),
                ('Affilliate_price', models.FloatField(default=100)),
                ('TopUser_price', models.FloatField(default=100)),
                ('api_price', models.FloatField(default=100)),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.network')),
            ],
            options={
                'verbose_name_plural': 'RECHARGE CARD PRINTING PRICE',
            },
        ),
        migrations.CreateModel(
            name='Result_Checker_Pin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_name', models.CharField(choices=[('WAEC', 'WAEC'), ('NECO', 'NECO'), ('NABTEB', 'NABTEB')], max_length=15, unique=True)),
                ('provider_amount', models.FloatField(default=1700, help_text='amount your API provider are selling it')),
                ('disable_this_exam', models.BooleanField(blank=True, default=False, null=True)),
                ('provider_api', models.CharField(choices=[('MSORG WEB', 'MSORG WEB'), ('MOBILENIG', 'MOBILENIG'), ('VTPASS', 'VTPASS')], default='MOBILENIG', max_length=30)),
                ('amount', models.FloatField(default='1800')),
                ('Affilliate_price', models.FloatField(default=1750)),
                ('TopUser_price', models.FloatField(default=1750)),
                ('api_price', models.FloatField(default=1750)),
            ],
            options={
                'verbose_name_plural': 'RESULT CHECKER CONTROL',
            },
        ),
        migrations.CreateModel(
            name='RetailWebFrequentlyAskedQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(blank=True, max_length=100, null=True)),
                ('answer', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'FREQUENTLY ASKED QUESTIONS(Retailer Website)',
            },
        ),
        migrations.CreateModel(
            name='ServicesCharge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.CharField(choices=[('Data', 'Data'), ('Airtime', 'Airtime'), ('Cablesub', 'Cablesub'), ('Bill', 'Bill'), ('Bankpayment', 'Bankpayment'), ('Monnify ATM', 'Monnify ATM'), ('Monnfy bank', 'Monnify bank'), ('paystack', 'paystack'), ('Result_checker', 'Result_checker'), ('Recharge_Printing', 'Recharge_Printing'), ('Bulk sms', 'Bulk sms'), ('Airtime_Funding', 'Airtime_Funding')], max_length=100, unique=True)),
                ('charge', models.FloatField(default=0.0, help_text='Note: Extra charge , you can either set charge or Discount dont set both at once')),
                ('Affilliate_charge', models.FloatField(default=0.0, help_text='Note: Extra charge , you can either set charge or Discount dont set both at once')),
                ('topuser_charge', models.FloatField(default=0.0, help_text='Note: Extra charge , you can either set charge or Discount dont set both at once')),
                ('api_charge', models.FloatField(default=0.0, help_text='Note: Extra charge , you can either set charge or Discount dont set both at once')),
                ('discount', models.FloatField(default=0.0, help_text='set charge to 0 to set discount')),
                ('Affilliate_discount', models.FloatField(default=0.0, help_text='set charge to 0 to set discount for affillitae users')),
                ('topuser_discount', models.FloatField(default=0.0, help_text='set charge to 0 to set discount for topuser')),
                ('api_discount', models.FloatField(default=0.0, help_text='set charge to 0 to set discountfor api user')),
            ],
            options={
                'verbose_name_plural': 'SERVICE CHARGE',
            },
        ),
        migrations.CreateModel(
            name='SmeifyAuth',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(blank=True, max_length=100, null=True)),
                ('password', models.CharField(blank=True, max_length=100, null=True)),
                ('token', models.TextField(blank=True, null=True)),
                ('expire_date', models.DateTimeField(blank=True, null=True)),
                ('re_auth', models.BooleanField(blank=True, default=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='user_upgrade_amount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('top_user_amount', models.CharField(max_length=10)),
                ('affilliate_user_amount', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Withdraw',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accountNumber', models.CharField(blank=True, max_length=30)),
                ('accountName', models.CharField(blank=True, max_length=30)),
                ('bankName', models.CharField(blank=True, choices=[('Access Bank', 'Access Bank'), ('Access(Diamond) Bank', 'Access (Diamond) Bank'), ('ECO Bank', 'ECO Bank'), ('First Bank of Nigeria', 'First Bank of Nigeria'), ('FCMBank', 'FCMBank'), ('FIdelity Bank', 'FIdelity Bank'), ('GTBank', 'GTBank'), ('Heritage Bank', 'Heritage Bank'), ('Kuda Bank', 'Kuda Bank'), ('Opay', 'Opay'), ('Palmpay', 'Palmpay'), ('Polarise Bank', 'Polarise Bank'), ('Stanbic IBTC', 'Stanbic IBTC'), ('Sterling Bank', 'Sterling Bank'), ('UBA', 'UBA'), ('Union Bank', 'Union Bank'), ('Unity Bank', 'Unity Bank'), ('Wema Bank', 'Wema Bank'), ('Zenith Bank', 'Zenith Bank')], max_length=100)),
                ('amount', models.CharField(blank=True, max_length=30)),
                ('previous_balance', models.CharField(blank=True, max_length=30)),
                ('after_balance', models.CharField(blank=True, max_length=30, null=True)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='processing', help_text='Select failed and save to refund user', max_length=30)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('Current_balance', models.CharField(blank=True, max_length=30)),
                ('ident', models.CharField(default=app.models.create_id, editable=False, max_length=30)),
                ('refund', models.BooleanField(blank=True, default=False, null=True)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'WITHDRAW TRANSACTIONS',
            },
        ),
        migrations.CreateModel(
            name='Wallet_summary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product', models.CharField(blank=True, max_length=500)),
                ('amount', models.CharField(blank=True, max_length=30)),
                ('previous_balance', models.CharField(blank=True, max_length=30)),
                ('after_balance', models.CharField(blank=True, max_length=30, null=True)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='successful', max_length=30)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('ident', models.CharField(default=app.models.create_id, editable=False, max_length=30)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='wallet', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'USERS WALLET SUMMARY',
            },
        ),
        migrations.CreateModel(
            name='Wallet_Funding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medium', models.CharField(blank=True, editable=False, max_length=500)),
                ('amount', models.CharField(blank=True, editable=False, max_length=30)),
                ('previous_balance', models.CharField(blank=True, editable=False, max_length=30)),
                ('after_balance', models.CharField(blank=True, editable=False, max_length=30, null=True)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('ident', models.CharField(default=app.models.create_id, editable=False, max_length=30)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='wallet_funding', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'WALLET FUNDING TRACKING',
            },
        ),
        migrations.CreateModel(
            name='Upgrade_user',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_package', models.CharField(blank=True, max_length=50)),
                ('to_package', models.CharField(blank=True, max_length=50)),
                ('amount', models.CharField(blank=True, max_length=30)),
                ('previous_balance', models.CharField(blank=True, max_length=30)),
                ('after_balance', models.CharField(blank=True, max_length=30, null=True)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='successful', max_length=30)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('ident', models.CharField(default=app.models.create_id, editable=False, max_length=30)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'UPGRADE USER',
            },
        ),
        migrations.CreateModel(
            name='Transfer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('receiver_username', models.CharField(blank=True, max_length=30)),
                ('amount', models.CharField(blank=True, max_length=30)),
                ('previous_balance', models.CharField(blank=True, max_length=30)),
                ('after_balance', models.CharField(blank=True, max_length=30, null=True)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='successful', max_length=30)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('Current_balance', models.CharField(blank=True, max_length=30)),
                ('ident', models.CharField(default=app.models.create_id, editable=False, max_length=30)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Airtime_tranfere', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'WALLET-WALLET TRANSFER TRANSACTIONS',
            },
        ),
        migrations.CreateModel(
            name='Transactions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField()),
                ('balance_before', models.FloatField(blank=True, null=True)),
                ('balance_after', models.FloatField(blank=True, null=True)),
                ('transaction_type', models.CharField(blank=True, max_length=30)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'WALLET TRANSACTIONS',
            },
        ),
        migrations.CreateModel(
            name='TopuserWebsite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Domain_name', models.CharField(max_length=500)),
                ('amount', models.CharField(max_length=10)),
                ('Offices_Address', models.CharField(max_length=800)),
                ('Website_Customer_Care_Number', models.CharField(max_length=15)),
                ('SSL_Security', models.BooleanField(default=False, help_text='Additional ₦5000 for SSL Certificate')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Processing', 'processing'), ('Delivered', 'Delivered')], default='processing', max_length=30)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TopupPercentage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percent', models.IntegerField()),
                ('Affilliate_percent', models.IntegerField(default=100)),
                ('topuser_percent', models.IntegerField(default=100)),
                ('api_percent', models.IntegerField(default=100)),
                ('share_n_sell_percent', models.IntegerField(default=100)),
                ('share_n_sell_api_percent', models.IntegerField(default=100)),
                ('share_n_sell_affilliate_percent', models.IntegerField(default=100)),
                ('share_n_sell_topuser_percent', models.IntegerField(default=100)),
                ('awuf4u_percent', models.IntegerField(default=100)),
                ('awuf4u_api_percent', models.IntegerField(default=100)),
                ('awuf4u_affilliate_percent', models.IntegerField(default=100)),
                ('awuf4u_topuser_percent', models.IntegerField(default=100)),
                ('commission', models.FloatField(default=0)),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.network')),
            ],
            options={
                'verbose_name_plural': 'AIRTIME TOPUP PERCENTAGE',
            },
        ),
        migrations.CreateModel(
            name='Testimonial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SME_text',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(blank=True, max_length=100, null=True)),
                ('text_to_search', models.CharField(blank=True, max_length=100, null=True)),
                ('pin', models.CharField(blank=True, help_text='DATA PIN if any', max_length=10, null=True)),
                ('sim_host_server_id_for_airtime', models.CharField(blank=True, help_text='If you are using simhost', max_length=500, null=True)),
                ('sim_host_server_id_for_data', models.CharField(blank=True, help_text='If you are using simhost', max_length=500, null=True)),
                ('vtu_sim_slot', models.IntegerField(blank=True, help_text='Enter 1 for sim1 or 2 for sim2', null=True)),
                ('data_sim_slot', models.IntegerField(blank=True, help_text='Enter 1 for sim1 or 2 for sim2', null=True)),
                ('mtn_sme_route', models.CharField(blank=True, choices=[('SMS', 'SMS'), ('USSD', 'USSD')], help_text='Select either SMS  to 131 or USSD  ', max_length=500, null=True)),
                ('msplug_device_id', models.CharField(blank=True, help_text='If you are using MSPLUG ', max_length=500, null=True)),
                ('msplug_sim_slot', models.CharField(blank=True, choices=[('sim1', 'sim1'), ('sim2', 'sim2')], help_text='If you are using MSPLUG i.e enter sim1 for sim1, sim2 for sim2', max_length=5, null=True)),
                ('vtu_pin', models.CharField(blank=True, max_length=10, null=True)),
                ('share_and_sell_pin', models.CharField(blank=True, max_length=10, null=True)),
                ('vtu_auto_device_id', models.CharField(blank=True, help_text='If you are using VTU AUTO', max_length=500, null=True)),
                ('network', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.network')),
            ],
            options={
                'verbose_name_plural': 'SIM MANAGEMENT',
            },
        ),
        migrations.CreateModel(
            name='SellBtc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Btc', models.FloatField(null=True)),
                ('amount', models.FloatField(null=True)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('ident', models.CharField(default=app.models.create_id, editable=False, max_length=30)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='processing', max_length=30)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Result_Checker_Pin_order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_name', models.CharField(choices=[('WAEC', 'WAEC'), ('NECO', 'NECO'), ('NABTEB', 'NABTEB')], max_length=15)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('data', models.TextField(null=True)),
                ('amount', models.FloatField(default=0)),
                ('previous_balance', models.CharField(blank=True, max_length=30)),
                ('after_balance', models.CharField(blank=True, max_length=30, null=True)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='successful', max_length=30)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'RESULT CHECKER TRANSACTIONS',
            },
        ),
        migrations.CreateModel(
            name='Referal_list',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=30)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('referal_user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='referal', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Recharge_pin_order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.TextField(null=True)),
                ('name_on_card', models.CharField(max_length=200, null=True)),
                ('amount', models.FloatField(default=0)),
                ('previous_balance', models.CharField(blank=True, max_length=30)),
                ('after_balance', models.CharField(blank=True, max_length=30, null=True)),
                ('quantity', models.PositiveIntegerField(null=True)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='successful', max_length=30)),
                ('network', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.network')),
                ('network_amount', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.recharge')),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'RECHARGE CARD PRINTING TRANSACTIONS',
            },
        ),
        migrations.CreateModel(
            name='Recharge_pin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('available', models.BooleanField(default=True)),
                ('amount', models.FloatField(default=100)),
                ('pin', models.CharField(max_length=20, null=True)),
                ('serial', models.CharField(max_length=100, null=True)),
                ('load_code', models.CharField(max_length=100, null=True)),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pin_net', to='app.network')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='blogimage')),
                ('content', models.TextField()),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('status', models.IntegerField(choices=[(0, 'Draft'), (1, 'Publish')], default=0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_on'],
            },
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan_size', models.FloatField()),
                ('plan_Volume', models.CharField(choices=[('MB', 'MB'), ('GB', 'GB'), ('TB', 'TB')], max_length=30)),
                ('plan_amount', models.PositiveIntegerField()),
                ('ussd_string', models.CharField(blank=True, help_text='put small letter n in place of number and p in place of pin i.e*141*6*2*3*3*1*n*p#', max_length=500, null=True)),
                ('sms_command', models.CharField(blank=True, help_text='put small letter n in place of number and p in place of pin i.e SMEB n 1000 p', max_length=500, null=True)),
                ('plan_name_id', models.CharField(blank=True, max_length=500, null=True)),
                ('plan_name_id_2', models.CharField(blank=True, help_text='Enter plan ID for your 2nd MSORG WEBSITE API', max_length=500, null=True)),
                ('plan_name_id_3', models.CharField(blank=True, help_text='Enter plan ID for your 3rd MSORG WEBSITE API', max_length=500, null=True)),
                ('Affilliate_price', models.PositiveIntegerField(default=100000)),
                ('TopUser_price', models.PositiveIntegerField(default=100000)),
                ('api_price', models.PositiveIntegerField(default=100000)),
                ('smeplug_id', models.CharField(blank=True, max_length=500, null=True)),
                ('vtpass_variation_code', models.CharField(blank=True, max_length=500, null=True)),
                ('smeify_plan_name_id', models.CharField(blank=True, max_length=30, null=True)),
                ('uws_plan_name_id', models.CharField(blank=True, max_length=500, null=True)),
                ('msplug_plan_name_id', models.CharField(blank=True, max_length=30, null=True)),
                ('ogdams_plan_id', models.CharField(blank=True, max_length=30, null=True)),
                ('qtopup_id', models.CharField(blank=True, max_length=30, null=True)),
                ('plan_type', models.CharField(blank=True, choices=[('SME', 'SME'), ('GIFTING', 'GIFTING'), ('CORPORATE GIFTING', 'CORPORATE GIFTING')], help_text='Data plan  type only .', max_length=30)),
                ('month_validate', models.CharField(max_length=30)),
                ('commission', models.PositiveIntegerField(default=0)),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.network')),
            ],
            options={
                'verbose_name_plural': 'DATA PLANS',
            },
        ),
        migrations.CreateModel(
            name='PinCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pin', models.IntegerField(unique=True)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Percentage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percent', models.IntegerField()),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.network')),
            ],
            options={
                'verbose_name_plural': 'AIRTIME TO CASH PERCENTAGE',
            },
        ),
        migrations.CreateModel(
            name='paymentgateway',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(blank=True, max_length=50, null=True)),
                ('amount', models.FloatField(blank=True, null=True)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='processing', max_length=30)),
                ('gateway', models.CharField(default='Paystack', max_length=30)),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'PAYMENT GATEWAY TRANSACTIONS',
            },
        ),
        migrations.CreateModel(
            name='Notify_user',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(blank=True, max_length=30)),
                ('message', models.TextField()),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('send_email', models.BooleanField(blank=True, default=False, null=True)),
                ('ident', models.CharField(default=app.models.create_id, editable=False, max_length=30)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='New_order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('amount', models.PositiveIntegerField()),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Load_Recharge_pin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dump_pin', models.TextField()),
                ('amount', models.FloatField(default=0)),
                ('load_code', models.CharField(max_length=100, null=True)),
                ('total_pin_loaded', models.CharField(blank=True, help_text='Leave blank, system automatic return it', max_length=100, null=True)),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Loadpin_net', to='app.network')),
            ],
            options={
                'verbose_name_plural': 'LOAD RECHARGE PIN',
            },
        ),
        migrations.CreateModel(
            name='KYC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('First_Name', models.CharField(help_text='Your name here', max_length=50, null=True)),
                ('Middle_Name', models.CharField(max_length=50, null=True)),
                ('Last_Name', models.CharField(help_text='Your Surname', max_length=50, null=True)),
                ('DOB', models.DateField(null=True)),
                ('Gender', models.CharField(max_length=6, null=True)),
                ('State_of_origin', models.CharField(max_length=100, null=True)),
                ('Local_gov_of_origin', models.CharField(max_length=100, null=True)),
                ('BVN', models.CharField(max_length=50, null=True)),
                ('passport_photogragh', models.ImageField(help_text='Maximum of 50kb in size', null=True, upload_to='passport_images', validators=[app.models.validate_file_size])),
                ('status', models.CharField(choices=[('processing', 'processing'), ('Approved', 'Approved'), ('Not_Appprove', 'Not_Approve')], default='processing', max_length=20, null=True)),
                ('dump', models.TextField()),
                ('comment', models.TextField()),
                ('primary_details_verified', models.BooleanField(default=False)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Customer', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'KYC',
            },
        ),
        migrations.CreateModel(
            name='Data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_type', models.CharField(blank=True, choices=[('SME', 'SME'), ('GIFTING', 'GIFTING'), ('CORPORATE GIFTING', 'CORPORATE GIFTING')], help_text='Select Plan Type SME, GIFTING or CORPORATE GIFTING', max_length=30, null=True)),
                ('mobile_number', models.CharField(blank=True, max_length=30)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='processing', help_text='Select failed and save to refund user', max_length=30)),
                ('medium', models.CharField(default='website', max_length=30)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('balance_before', models.CharField(blank=True, max_length=30)),
                ('balance_after', models.CharField(blank=True, max_length=30, null=True)),
                ('plan_amount', models.CharField(blank=True, max_length=30)),
                ('Ported_number', models.BooleanField(blank=True, default=False, null=True)),
                ('refund', models.BooleanField(blank=True, default=False, null=True)),
                ('ident', models.CharField(default=app.models.create_id, editable=False, max_length=100, verbose_name='Reference ID')),
                ('customer_ref', models.CharField(blank=True, max_length=100, null=True, verbose_name='Customer Ref')),
                ('provider_source', models.CharField(blank=True, max_length=100, null=True)),
                ('network', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.network')),
                ('plan', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.plan')),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'DATA TOP-UP TRANSACTIONS',
            },
        ),
        migrations.CreateModel(
            name='CouponPayment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Code', models.CharField(max_length=15)),
                ('amount', models.IntegerField(editable=False, null=True)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('ident', models.CharField(default=app.models.create_id, editable=False, max_length=30)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='successful', max_length=30)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'COUPON PAYMENTS',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Reply', models.TextField()),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('testimonial', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='app.testimonial')),
            ],
        ),
        migrations.CreateModel(
            name='Cablesub',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('smart_card_number', models.CharField(blank=True, max_length=30)),
                ('balance_before', models.CharField(blank=True, max_length=30)),
                ('balance_after', models.CharField(blank=True, max_length=30)),
                ('plan_amount', models.CharField(blank=True, max_length=30)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='processing', help_text='Select failed and save to refund user', max_length=30)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('refund', models.BooleanField(blank=True, default=False, null=True)),
                ('customer_name', models.CharField(blank=True, max_length=70, null=True)),
                ('ident', models.CharField(default=app.models.create_id, editable=False, max_length=100, verbose_name='Reference ID')),
                ('provider_source', models.CharField(blank=True, max_length=100, null=True)),
                ('cablename', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.cable')),
                ('cableplan', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.cableplan')),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'CABLE SUBSCRIPTION TRANSACTIONS',
            },
        ),
        migrations.CreateModel(
            name='Buybtc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Btc', models.FloatField(null=True)),
                ('amount', models.FloatField(null=True)),
                ('Btc_address', models.CharField(max_length=200)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('ident', models.CharField(default=app.models.create_id, editable=False, max_length=30)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='processing', max_length=30)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Bulk_Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit', models.IntegerField(null=True)),
                ('invalid', models.IntegerField(null=True)),
                ('total', models.IntegerField(null=True)),
                ('page', models.FloatField(null=True)),
                ('amount', models.FloatField(null=True)),
                ('sendername', models.CharField(blank=True, max_length=12)),
                ('message', models.TextField(blank=True)),
                ('to', models.TextField(blank=True)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('DND', models.BooleanField(blank=True, default=False, null=True)),
                ('ident', models.CharField(default=app.models.create_id, editable=False, max_length=30)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'BULK SMS',
            },
        ),
        migrations.CreateModel(
            name='Book_order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('email', models.EmailField(max_length=254)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('book_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.book')),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='book',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='books', to='app.category'),
        ),
        migrations.CreateModel(
            name='bonus_transfer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.CharField(blank=True, max_length=30)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('Current_bonus', models.CharField(blank=True, max_length=30)),
                ('ident', models.CharField(default=app.models.create_id, editable=False, max_length=30)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Billpayment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.CharField(max_length=30)),
                ('paid_amount', models.CharField(blank=True, max_length=30)),
                ('balance_before', models.CharField(blank=True, max_length=30)),
                ('balance_after', models.CharField(blank=True, max_length=30)),
                ('meter_number', models.CharField(blank=True, max_length=30)),
                ('token', models.CharField(blank=True, max_length=200, null=True)),
                ('Customer_Phone', models.CharField(max_length=15, null=True)),
                ('MeterType', models.CharField(choices=[('Prepaid', 'Prepaid'), ('Postpaid', 'Postpaid')], max_length=30, null=True)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='processing', help_text='Select failed and save to refund user', max_length=30)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('refund', models.BooleanField(blank=True, default=False, null=True)),
                ('customer_name', models.CharField(blank=True, max_length=250, null=True)),
                ('customer_address', models.CharField(blank=True, max_length=500, null=True)),
                ('ident', models.CharField(default=app.models.create_id, editable=False, max_length=100, verbose_name='Reference ID')),
                ('provider_source', models.CharField(blank=True, max_length=100, null=True)),
                ('disco_name', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.disco_provider_name')),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'BILL PAYMENT TRANSACTIONS',
            },
        ),
        migrations.CreateModel(
            name='Bankpayment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Bank_paid_to', models.CharField(blank=True, max_length=15, null=True)),
                ('Reference', models.CharField(blank=True, max_length=15, null=True)),
                ('amount', models.CharField(blank=True, max_length=30, null=True)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('ident', models.CharField(default=app.models.create_id, editable=False, max_length=30)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='processing', max_length=30)),
                ('fund', models.BooleanField(blank=True, default=False, null=True)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'MANUAL BANK FUNDING',
            },
        ),
        migrations.CreateModel(
            name='Automation_control',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Network_good', models.BooleanField(default=False)),
                ('network_name', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.network')),
            ],
        ),
        migrations.CreateModel(
            name='AirtimeTopup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mobile_number', models.CharField(blank=True, max_length=30)),
                ('airtime_type', models.CharField(choices=[('VTU', 'VTU'), ('Share and Sell', 'Share and Sell'), ('awuf4U', 'awuf4U')], default='VTU', help_text='VTU or share and Sell', max_length=30)),
                ('amount', models.CharField(blank=True, max_length=30)),
                ('paid_amount', models.CharField(blank=True, max_length=30)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='processing', help_text='Select failed and save to refund user', max_length=30)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('balance_before', models.CharField(blank=True, max_length=30)),
                ('balance_after', models.CharField(blank=True, max_length=30)),
                ('Ported_number', models.BooleanField(blank=True, default=False, null=True)),
                ('medium', models.CharField(default='website', max_length=30)),
                ('refund', models.BooleanField(blank=True, default=False, null=True)),
                ('ident', models.CharField(default=app.models.create_id, editable=False, max_length=100, verbose_name='Reference ID')),
                ('provider_source', models.CharField(blank=True, max_length=100, null=True)),
                ('network', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.network')),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'AIRTIME TOPUP TRANSACTIONS',
            },
        ),
        migrations.CreateModel(
            name='Airtimeswap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.CharField(blank=True, max_length=30)),
                ('mobile_number', models.CharField(blank=True, max_length=30)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='processing', max_length=30)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('Receivece_amount', models.FloatField(null=True)),
                ('Ported_number', models.BooleanField(blank=True, default=False, null=True)),
                ('ident', models.CharField(default=app.models.create_id, editable=False, max_length=30)),
                ('swap_from_network', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='network_swap_from', to='app.network')),
                ('swap_to_network', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='network_swap_to', to='app.network')),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Airtime_to_Data_tranfer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan', models.CharField(choices=[('600', '1Gb  = #600'), ('1200', '2Gb  = #1200'), ('2900', '5Gb  = #2900')], max_length=30, null=True)),
                ('network', models.CharField(choices=[('MTN', 'MTN')], max_length=30, null=True)),
                ('Transfer_number', models.CharField(blank=True, max_length=30)),
                ('mobile_number', models.CharField(blank=True, max_length=30)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='processing', max_length=30)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('Ported_number', models.BooleanField(blank=True, default=False, null=True)),
                ('ident', models.CharField(default=app.models.create_id, editable=False, max_length=30)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Airtime_to_data_Plan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan_size', models.FloatField()),
                ('plan_Volume', models.CharField(choices=[('MB', 'MB'), ('GB', 'GB'), ('TB', 'TB')], max_length=30)),
                ('plan_amount', models.PositiveIntegerField()),
                ('month_validate', models.CharField(max_length=30)),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.network_1')),
            ],
        ),
        migrations.CreateModel(
            name='Airtime_to_Data_pin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mobile_number', models.CharField(blank=True, max_length=30)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='processing', max_length=30)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('pin', models.CharField(blank=True, max_length=30)),
                ('Ported_number', models.BooleanField(blank=True, default=False, null=True)),
                ('ident', models.CharField(default=app.models.create_id, editable=False, max_length=30)),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.network_1')),
                ('plan', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.airtime_to_data_plan')),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Airtime_funding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mobile_number', models.CharField(blank=True, max_length=30)),
                ('amount', models.FloatField()),
                ('Receivece_amount', models.FloatField(null=True)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='processing', help_text='Select Succesful and save to fund user', max_length=30)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('ident', models.CharField(default=app.models.create_id, editable=False, max_length=30)),
                ('fund', models.BooleanField(blank=True, default=False, null=True)),
                ('BankName', models.CharField(blank=True, max_length=100)),
                ('AccountNumber', models.CharField(blank=True, max_length=10)),
                ('AccountName', models.CharField(blank=True, max_length=200)),
                ('use_to_fund_wallet', models.BooleanField(choices=[(False, 'Withdraw to bank'), (True, 'Withdraw to wallet')], help_text='Note: Only payments of 1000naira and above are eligible to be paid into bank accounts, anything less will be to wallet')),
                ('network', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.network')),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'AIRTIME TO CASH TRANSACTIONS',
            },
        ),
        migrations.CreateModel(
            name='Airtime_automation_control',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Network_good', models.BooleanField(default=False)),
                ('network_name', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.network')),
            ],
        ),
        migrations.CreateModel(
            name='Airtime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pin', models.CharField(blank=True, max_length=30)),
                ('amount', models.CharField(choices=[('100', '#100'), ('200', '#200'), ('400', '#400'), ('500', '#500'), ('1000', '#1000')], default='#100', max_length=30)),
                ('Receivece_amount', models.FloatField(null=True)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='processing', max_length=30)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('ident', models.CharField(default=app.models.create_id, editable=False, max_length=30)),
                ('fund', models.BooleanField(blank=True, default=False, null=True)),
                ('network', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.network')),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AlterIndexTogether(
            name='book',
            index_together={('id', 'slug')},
        ),
    ]
